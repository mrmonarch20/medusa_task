name: Deploy to AWS ECS from Docker Hub

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  AWS_REGION: us-east-1
  ECS_CLUSTER: medusa-cluster
  ECS_SERVICE: medusa-service
  ECS_TASK_FAMILY: medusa-app
  TERRAFORM_DIR: ./terraform
  SERVER_IMAGE_NAME: raja7977/medusa-server
  STOREFRONT_IMAGE_NAME: raja7977/medusa-storefront
  IMAGE_TAG: latest

jobs:
  build-and-push:
    name: Build & Push Docker Images to Docker Hub
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }}
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

      - name: Build and push Medusa Server image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./docker/Dockerfile
          push: true
          tags: ${{ env.SERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Build and push Medusa Storefront image
        uses: docker/build-push-action@v5
        with:
          context: ./medusa-storefront
          file: ./docker/Dockerfile.storefront
          push: true
          tags: ${{ env.STOREFRONT_IMAGE_NAME }}:${{ env.IMAGE_TAG }}

  terraform:
    name: Terraform Apply
    runs-on: ubuntu-latest
    needs: build-and-push
    defaults:
      run:
        working-directory: ${{ env.TERRAFORM_DIR }}
    outputs:
      db_password_secret_arn: ${{ steps.terraform-outputs.outputs.db_password_secret_arn }}
    steps:
      - uses: actions/checkout@v4

      - uses: hashicorp/setup-terraform@v3
        with:
          terraform_version: 1.7.5

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Terraform Init
        run: terraform init

      - name: Terraform Apply
        run: terraform apply -auto-approve

      - name: Get Terraform Outputs
        id: terraform-outputs
        run: |
          echo "db_password_secret_arn=$(terraform output -raw db_password_secret_arn)" >> $GITHUB_OUTPUT

  deploy:
    name: Deploy to ECS
    runs-on: ubuntu-latest
    needs: terraform
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get DB Password from Secrets Manager
        id: get-db-password
        run: |
          DB_PASSWORD=$(aws secretsmanager get-secret-value \
            --secret-id ${{ needs.terraform.outputs.db_password_secret_arn }} \
            --query 'SecretString' --output text)
          echo "DB_PASSWORD=$DB_PASSWORD" >> $GITHUB_ENV

      - name: Get current task definition
        id: task-def
        run: |
          aws ecs describe-task-definition \
            --task-definition ${{ env.ECS_TASK_FAMILY }} \
            --query 'taskDefinition' > task-definition.json

      - name: Update container images and environment in task definition
        run: |
          SERVER_IMAGE="${{ env.SERVER_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          STOREFRONT_IMAGE="${{ env.STOREFRONT_IMAGE_NAME }}:${{ env.IMAGE_TAG }}"
          
          # Update both container images and database connection string in the task definition
          jq --arg SERVER_IMAGE "$SERVER_IMAGE" \
             --arg STOREFRONT_IMAGE "$STOREFRONT_IMAGE" \
             --arg DB_PASSWORD "${{ env.DB_PASSWORD }}" \
            '(.containerDefinitions[] | select(.name == "medusa-server") | .image) = $SERVER_IMAGE | 
             (.containerDefinitions[] | select(.name == "medusa-storefront") | .image) = $STOREFRONT_IMAGE | 
             (.containerDefinitions[] | select(.name == "medusa-server") | .environment[] | select(.name == "DATABASE_URL") | .value) |= sub("postgres://[^:]+:[^@]+@"; "postgres://postgres:" + $DB_PASSWORD + "@") |
             del(.status, .revision, .requiresAttributes, .compatibilities, .registeredAt, .registeredBy, .taskDefinitionArn)' \
            task-definition.json > new-task-def.json

      - name: Register new task definition
        id: register-task
        run: |
          TASK_DEF_ARN=$(aws ecs register-task-definition \
            --cli-input-json file://new-task-def.json \
            --query 'taskDefinition.taskDefinitionArn' \
            --output text)
          echo "TASK_DEF_ARN=$TASK_DEF_ARN" >> $GITHUB_ENV

      - name: Update ECS service
        run: |
          aws ecs update-service \
            --cluster ${{ env.ECS_CLUSTER }} \
            --service ${{ env.ECS_SERVICE }} \
            --task-definition ${{ env.TASK_DEF_ARN }}

  get-urls:
    name: Get Application URLs
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Get Terraform outputs
        working-directory: ${{ env.TERRAFORM_DIR }}
        run: |
          terraform init
          
          # Get the load balancer URL
          LB_URL=$(terraform output -raw load_balancer_url)
          ADMIN_URL=$(terraform output -raw medusa_admin_url)
          STOREFRONT_URL=$(terraform output -raw medusa_storefront_url)
          
          echo "Application URLs:"
          echo "Load Balancer: $LB_URL"
          echo "Admin Panel: $ADMIN_URL"
          echo "Storefront: $STOREFRONT_URL"
          
          # Create GitHub deployment
          echo "::notice::Application deployed successfully!"
          echo "::notice::Admin Panel: $ADMIN_URL"
          echo "::notice::Storefront: $STOREFRONT_URL"
